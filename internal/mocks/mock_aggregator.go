// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hanswang/clv/internal/aggregator (interfaces: AggregatorManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/hanswang/clv/internal/types"
)

// MockAggregatorManager is a mock of AggregatorManager interface.
type MockAggregatorManager struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorManagerMockRecorder
}

// MockAggregatorManagerMockRecorder is the mock recorder for MockAggregatorManager.
type MockAggregatorManagerMockRecorder struct {
	mock *MockAggregatorManager
}

// NewMockAggregatorManager creates a new mock instance.
func NewMockAggregatorManager(ctrl *gomock.Controller) *MockAggregatorManager {
	mock := &MockAggregatorManager{ctrl: ctrl}
	mock.recorder = &MockAggregatorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregatorManager) EXPECT() *MockAggregatorManagerMockRecorder {
	return m.recorder
}

// GenerateReport mocks base method.
func (m *MockAggregatorManager) GenerateReport(arg0 *map[string]types.Entity) []*types.Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReport", arg0)
	ret0, _ := ret[0].([]*types.Report)
	return ret0
}

// GenerateReport indicates an expected call of GenerateReport.
func (mr *MockAggregatorManagerMockRecorder) GenerateReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReport", reflect.TypeOf((*MockAggregatorManager)(nil).GenerateReport), arg0)
}

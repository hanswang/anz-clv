// Code generated by MockGen. DO NOT EDIT.
// Source: parse.go

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/hanswang/clv/internal/types"
)

// MockParserManager is a mock of ParserManager interface.
type MockParserManager struct {
	ctrl     *gomock.Controller
	recorder *MockParserManagerMockRecorder
}

// MockParserManagerMockRecorder is the mock recorder for MockParserManager.
type MockParserManagerMockRecorder struct {
	mock *MockParserManager
}

// NewMockParserManager creates a new mock instance.
func NewMockParserManager(ctrl *gomock.Controller) *MockParserManager {
	mock := &MockParserManager{ctrl: ctrl}
	mock.recorder = &MockParserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserManager) EXPECT() *MockParserManagerMockRecorder {
	return m.recorder
}

// ParseCSV mocks base method.
func (m *MockParserManager) ParseCSV(rows []string) (*map[string]types.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCSV", rows)
	ret0, _ := ret[0].(*map[string]types.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCSV indicates an expected call of ParseCSV.
func (mr *MockParserManagerMockRecorder) ParseCSV(rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCSV", reflect.TypeOf((*MockParserManager)(nil).ParseCSV), rows)
}
